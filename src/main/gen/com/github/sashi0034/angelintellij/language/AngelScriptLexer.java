// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: AngelScript.flex

package com.github.sashi0034.angelintellij.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.github.sashi0034.angelintellij.psi.AngelScriptTypes;


class AngelScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\2\11\1\12\1\13"+
    "\1\11\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\24\1\26\1\27\1\30\1\11"+
    "\1\31\1\32\1\33\2\11\1\34\1\35\2\34\1\36"+
    "\1\34\10\37\1\40\3\37\1\41\4\37\1\42\2\37"+
    "\1\11\1\43\1\11\1\44\1\37\1\0\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\37\1\53\1\54\1\37"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\37\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\37"+
    "\1\11\1\73\2\11\6\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\74";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\2\3\1\1\6\3"+
    "\2\4\3\3\1\5\1\3\22\5\1\3\2\0\1\6"+
    "\2\0\1\6\2\0\1\4\1\7\5\0\1\3\10\5"+
    "\1\10\6\5\1\10\1\5\1\10\15\5\2\0\1\4"+
    "\1\0\3\4\17\5\1\10\12\5\2\0\21\5\1\10"+
    "\2\0\10\5\1\7\7\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\75\0\267\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\75\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1"+
    "\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u01ab\0\75\0\u0a3f"+
    "\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27"+
    "\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u044a\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u0b70\0\u1441\0\u1441\0\u0bea\0\u0c27\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee"+
    "\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\75"+
    "\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\10\21"+
    "\1\22\1\23\1\7\1\24\7\25\1\2\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\25\1\35\2\25"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\25\1\51\77\0\2\3\124\0"+
    "\1\12\21\0\1\52\20\0\2\53\1\0\2\53\1\54"+
    "\35\53\1\55\31\53\32\0\1\12\51\0\1\12\22\0"+
    "\1\12\42\0\2\56\1\0\5\56\1\57\32\56\1\60"+
    "\31\56\12\0\1\7\17\0\1\12\55\0\1\12\16\0"+
    "\1\12\56\0\1\12\15\0\1\12\57\0\1\61\1\0"+
    "\11\62\63\0\1\63\13\0\1\12\10\0\1\64\46\0"+
    "\1\62\1\0\11\21\5\0\1\65\1\66\1\0\1\67"+
    "\1\0\1\70\3\0\1\65\2\0\1\66\7\0\1\67"+
    "\7\0\1\70\20\0\1\62\1\0\11\21\6\0\1\66"+
    "\12\0\1\66\53\0\1\12\75\0\1\7\1\12\74\0"+
    "\1\12\1\71\60\0\11\25\4\0\7\25\2\0\26\25"+
    "\34\0\1\12\11\0\1\12\47\0\11\25\4\0\7\25"+
    "\2\0\13\25\1\72\5\25\1\73\4\25\21\0\11\25"+
    "\4\0\7\25\2\0\14\25\1\74\1\25\1\75\7\25"+
    "\21\0\11\25\4\0\7\25\2\0\1\76\10\25\1\77"+
    "\2\25\1\100\11\25\21\0\11\25\4\0\7\25\2\0"+
    "\4\25\1\101\7\25\1\102\11\25\21\0\11\25\4\0"+
    "\7\25\2\0\11\25\1\103\1\25\1\104\12\25\21\0"+
    "\11\25\4\0\7\25\2\0\1\105\10\25\1\106\2\25"+
    "\1\107\4\25\1\110\4\25\21\0\11\25\4\0\7\25"+
    "\2\0\5\25\1\111\4\25\1\112\1\113\3\25\1\111"+
    "\6\25\21\0\11\25\4\0\7\25\2\0\7\25\1\114"+
    "\16\25\21\0\11\25\4\0\7\25\2\0\1\115\13\25"+
    "\1\116\4\25\1\117\4\25\21\0\11\25\4\0\7\25"+
    "\2\0\16\25\1\111\2\25\1\116\1\120\3\25\21\0"+
    "\11\25\4\0\7\25\2\0\16\25\1\121\7\25\21\0"+
    "\11\25\4\0\7\25\2\0\4\25\1\122\21\25\21\0"+
    "\11\25\4\0\7\25\2\0\23\25\1\123\2\25\21\0"+
    "\11\25\4\0\7\25\2\0\16\25\1\124\6\25\1\125"+
    "\21\0\11\25\4\0\7\25\2\0\7\25\1\126\16\25"+
    "\21\0\11\25\4\0\7\25\2\0\14\25\1\127\11\25"+
    "\21\0\11\25\4\0\7\25\2\0\6\25\1\130\17\25"+
    "\21\0\11\25\4\0\7\25\2\0\14\25\1\107\11\25"+
    "\34\0\1\12\40\0\1\12\65\0\1\12\10\0\2\53"+
    "\1\0\2\53\1\57\35\53\1\55\31\53\5\0\1\131"+
    "\67\0\2\53\2\0\70\53\1\0\2\56\2\0\70\56"+
    "\16\0\1\12\76\0\11\62\6\0\1\66\12\0\1\66"+
    "\23\0\2\63\1\0\72\63\12\0\1\132\101\0\2\133"+
    "\67\0\2\134\2\0\11\135\64\0\7\136\66\0\11\137"+
    "\4\0\3\137\6\0\6\137\54\0\1\12\1\7\60\0"+
    "\11\25\4\0\7\25\2\0\3\25\1\111\22\25\21\0"+
    "\11\25\4\0\7\25\2\0\20\25\1\140\5\25\21\0"+
    "\11\25\4\0\7\25\2\0\14\25\1\141\11\25\21\0"+
    "\11\25\4\0\7\25\2\0\4\25\1\142\21\25\21\0"+
    "\11\25\4\0\7\25\2\0\17\25\1\143\1\144\5\25"+
    "\21\0\11\25\4\0\7\25\2\0\1\145\25\25\21\0"+
    "\11\25\4\0\7\25\2\0\13\25\1\146\12\25\21\0"+
    "\11\25\4\0\7\25\2\0\5\25\1\147\20\25\21\0"+
    "\11\25\4\0\7\25\2\0\21\25\1\150\4\25\21\0"+
    "\11\25\4\0\7\25\2\0\17\25\1\151\6\25\21\0"+
    "\11\25\4\0\7\25\2\0\21\25\1\152\4\25\21\0"+
    "\11\25\4\0\7\25\2\0\11\25\1\103\14\25\21\0"+
    "\11\25\4\0\7\25\2\0\14\25\1\153\11\25\21\0"+
    "\11\25\4\0\7\25\2\0\16\25\1\111\7\25\21\0"+
    "\11\25\4\0\7\25\2\0\13\25\1\154\12\25\21\0"+
    "\11\25\4\0\7\25\2\0\15\25\1\155\10\25\21\0"+
    "\11\25\4\0\7\25\2\0\14\25\1\156\3\25\1\157"+
    "\5\25\21\0\11\25\4\0\7\25\2\0\24\25\1\160"+
    "\1\25\21\0\11\25\4\0\7\25\2\0\12\25\1\161"+
    "\13\25\21\0\11\25\4\0\7\25\2\0\20\25\1\111"+
    "\5\25\21\0\11\25\4\0\7\25\2\0\11\25\1\141"+
    "\14\25\21\0\11\25\4\0\7\25\2\0\4\25\1\162"+
    "\21\25\21\0\11\25\4\0\7\25\2\0\7\25\1\163"+
    "\4\25\1\164\11\25\21\0\11\25\4\0\7\25\2\0"+
    "\20\25\1\165\5\25\21\0\11\25\4\0\7\25\2\0"+
    "\7\25\1\166\16\25\21\0\11\25\4\0\7\25\2\0"+
    "\21\25\1\151\3\25\1\111\21\0\11\25\4\0\7\25"+
    "\2\0\15\25\1\167\10\25\21\0\11\25\4\0\7\25"+
    "\2\0\13\25\1\170\12\25\21\0\11\25\4\0\7\25"+
    "\2\0\7\25\1\72\16\25\21\0\11\25\4\0\7\25"+
    "\2\0\7\25\1\171\16\25\7\0\1\172\33\0\1\131"+
    "\1\0\1\131\20\0\1\131\10\0\12\132\1\0\30\132"+
    "\1\173\31\132\17\0\11\135\64\0\11\25\4\0\7\25"+
    "\2\0\14\25\1\111\11\25\21\0\11\25\4\0\7\25"+
    "\2\0\11\25\1\111\14\25\21\0\11\25\4\0\7\25"+
    "\2\0\1\174\25\25\21\0\11\25\4\0\7\25\2\0"+
    "\4\25\1\111\13\25\1\111\5\25\21\0\11\25\4\0"+
    "\7\25\2\0\2\25\1\175\23\25\21\0\11\25\4\0"+
    "\7\25\2\0\17\25\1\176\6\25\21\0\11\25\4\0"+
    "\7\25\2\0\17\25\1\116\1\177\5\25\21\0\11\25"+
    "\4\0\7\25\2\0\1\200\25\25\21\0\11\25\4\0"+
    "\7\25\2\0\1\25\1\171\24\25\21\0\11\25\4\0"+
    "\7\25\2\0\4\25\1\111\21\25\21\0\11\25\4\0"+
    "\7\25\2\0\12\25\1\111\13\25\21\0\11\25\4\0"+
    "\7\25\2\0\1\116\25\25\21\0\11\25\4\0\7\25"+
    "\2\0\2\25\1\201\23\25\21\0\11\25\4\0\7\25"+
    "\2\0\14\25\1\202\11\25\21\0\11\25\4\0\7\25"+
    "\2\0\21\25\1\116\4\25\21\0\1\25\1\203\1\25"+
    "\1\204\2\25\1\205\1\111\1\25\4\0\7\25\2\0"+
    "\4\25\1\206\21\25\21\0\11\25\4\0\7\25\2\0"+
    "\7\25\1\207\16\25\21\0\11\25\4\0\7\25\2\0"+
    "\4\25\1\210\21\25\21\0\11\25\4\0\7\25\2\0"+
    "\16\25\1\211\7\25\21\0\11\25\4\0\7\25\2\0"+
    "\22\25\1\212\3\25\21\0\11\25\4\0\7\25\2\0"+
    "\20\25\1\213\5\25\21\0\11\25\4\0\7\25\2\0"+
    "\21\25\1\214\4\25\21\0\11\25\4\0\7\25\2\0"+
    "\20\25\1\144\5\25\21\0\11\25\4\0\7\25\2\0"+
    "\4\25\1\201\21\25\21\0\11\25\4\0\7\25\2\0"+
    "\20\25\1\215\5\25\21\0\11\25\4\0\7\25\2\0"+
    "\11\25\1\151\14\25\7\0\1\216\67\0\12\132\1\217"+
    "\30\132\1\173\31\132\17\0\11\25\4\0\7\25\2\0"+
    "\10\25\1\111\15\25\21\0\11\25\4\0\7\25\2\0"+
    "\6\25\1\111\17\25\21\0\11\25\4\0\7\25\2\0"+
    "\17\25\1\111\6\25\21\0\11\25\4\0\7\25\2\0"+
    "\7\25\1\220\16\25\21\0\11\25\4\0\7\25\2\0"+
    "\21\25\1\221\4\25\21\0\11\25\4\0\7\25\2\0"+
    "\3\25\1\222\22\25\21\0\11\25\4\0\7\25\2\0"+
    "\16\25\1\116\7\25\21\0\6\25\1\111\2\25\4\0"+
    "\7\25\2\0\26\25\21\0\2\25\1\111\6\25\4\0"+
    "\7\25\2\0\26\25\21\0\4\25\1\111\4\25\4\0"+
    "\7\25\2\0\26\25\21\0\11\25\4\0\7\25\2\0"+
    "\16\25\1\223\7\25\21\0\11\25\4\0\7\25\2\0"+
    "\13\25\1\111\12\25\21\0\11\25\4\0\7\25\2\0"+
    "\17\25\1\224\6\25\21\0\11\25\4\0\7\25\2\0"+
    "\16\25\1\225\7\25\21\0\11\25\4\0\7\25\2\0"+
    "\1\226\25\25\21\0\11\25\4\0\7\25\2\0\4\25"+
    "\1\227\21\25\21\0\11\25\4\0\7\25\2\0\16\25"+
    "\1\207\7\25\21\0\1\25\1\203\1\25\1\204\2\25"+
    "\1\205\1\111\1\25\4\0\7\25\2\0\26\25\7\0"+
    "\1\57\105\0\1\230\75\0\11\25\4\0\7\25\2\0"+
    "\13\25\1\231\12\25\21\0\11\25\4\0\7\25\2\0"+
    "\11\25\1\116\14\25\21\0\11\25\4\0\7\25\2\0"+
    "\4\25\1\232\21\25\21\0\11\25\4\0\7\25\2\0"+
    "\5\25\1\233\20\25\21\0\11\25\4\0\7\25\2\0"+
    "\15\25\1\233\10\25\21\0\11\25\4\0\7\25\2\0"+
    "\7\25\1\234\16\25\21\0\11\25\4\0\7\25\2\0"+
    "\20\25\1\151\5\25\21\0\11\25\4\0\7\25\2\0"+
    "\2\25\1\235\23\25\21\0\11\25\4\0\7\25\2\0"+
    "\21\25\1\151\4\25\21\0\11\25\4\0\7\25\2\0"+
    "\5\25\1\111\20\25\21\0\11\25\4\0\7\25\2\0"+
    "\1\236\25\25\21\0\11\25\4\0\7\25\2\0\3\25"+
    "\1\151\22\25\21\0\11\25\4\0\7\25\2\0\20\25"+
    "\1\237\5\25\21\0\11\25\4\0\7\25\2\0\2\25"+
    "\1\151\23\25\21\0\11\25\4\0\7\25\2\0\4\25"+
    "\1\72\21\25\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9089];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\5\1\1\11\37\1\2\0"+
    "\1\1\2\0\1\11\2\0\2\1\5\0\40\1\2\0"+
    "\1\1\1\0\35\1\2\0\22\1\2\0\10\1\1\11"+
    "\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AngelScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 9: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 10: break;
          case 3:
            { return AngelScriptTypes.MARK;
            }
          // fall through
          case 11: break;
          case 4:
            { return AngelScriptTypes.NUMBER;
            }
          // fall through
          case 12: break;
          case 5:
            { return AngelScriptTypes.IDENTIFIER;
            }
          // fall through
          case 13: break;
          case 6:
            { return AngelScriptTypes.STRING;
            }
          // fall through
          case 14: break;
          case 7:
            { return AngelScriptTypes.COMMENT;
            }
          // fall through
          case 15: break;
          case 8:
            { return AngelScriptTypes.KEYWORD;
            }
          // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
